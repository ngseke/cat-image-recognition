import * as tf from '@tensorflow/tfjs'

// MNIST image size.
const IMAGE_SIZE = 500
// Number of classes in the MNIST dataset.
const NUM_CLASSES = 1

/**
 * Build the discriminator part of ACGAN.
 *
 * The discriminator model of ACGAN takes the input: an image of
 * MNIST format, of shape [batchSize, 28, 28, 1].
 *
 * It gives two outputs:
 *
 *   1. A sigmoid probability score between 0 and 1, for whether the
 *      discriminator judges the input image to be real (close to 1)
 *      or fake (closer to 0).
 *   2. Softmax probability scores for the 10 MNIST digit categories,
 *      which is the discriminator's 10-class classification result
 *      for the input image.
 *
 * @returns {tf.LayersModel} The discriminator model.
 */
const buildDiscriminator = () => {
  const cnn = tf.sequential()

  cnn.add(tf.layers.conv2d({
    filters: 32,
    kernelSize: 3,
    padding: 'same',
    strides: 2,
    inputShape: [IMAGE_SIZE, IMAGE_SIZE, 1]
  }))
  cnn.add(tf.layers.leakyReLU({alpha: 0.2}))
  cnn.add(tf.layers.dropout({rate: 0.3}))

  cnn.add(tf.layers.conv2d(
      {filters: 64, kernelSize: 3, padding: 'same', strides: 1}))
  cnn.add(tf.layers.leakyReLU({alpha: 0.2}))
  cnn.add(tf.layers.dropout({rate: 0.3}))

  cnn.add(tf.layers.conv2d(
      {filters: 128, kernelSize: 3, padding: 'same', strides: 2}))
  cnn.add(tf.layers.leakyReLU({alpha: 0.2}))
  cnn.add(tf.layers.dropout({rate: 0.3}))

  cnn.add(tf.layers.conv2d(
      {filters: 256, kernelSize: 3, padding: 'same', strides: 1}))
  cnn.add(tf.layers.leakyReLU({alpha: 0.2}))
  cnn.add(tf.layers.dropout({rate: 0.3}))

  cnn.add(tf.layers.flatten())

  const image = tf.input({shape: [IMAGE_SIZE, IMAGE_SIZE, 1]})
  const features = cnn.apply(image)

  // Unlike most TensorFlow.js models, the discriminator has two outputs.

  // The 1st output is the probability score assigned by the discriminator to
  // how likely the input example is a real MNIST image (as versus
  // a "fake" one generated by the generator).
  const realnessScore =
      tf.layers.dense({units: 1, activation: 'sigmoid'}).apply(features)
  // The 2nd output is the softmax probabilities assign by the discriminator
  // for the 10 MNIST digit classes (0 through 9). "aux" stands for "auxiliary"
  // (the namesake of ACGAN) and refers to the fact that unlike a standard GAN
  // (which performs just binary real/fake classification), the discriminator
  // part of ACGAN also performs multi-class classification.
  const aux = tf.layers.dense({units: NUM_CLASSES, activation: 'softmax'})
                  .apply(features)

  return tf.model({inputs: image, outputs: [realnessScore, aux]})
}


export default {
  buildDiscriminator
}
